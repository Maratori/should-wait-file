from condition import Condition
from should import BaseShould


class File:
    def __init__(self, path: str) -> None: ...

    @property
    def should(self) -> FileShould: ...

    @property
    def exists(self) -> bool: ...


class FileShouldBe:
    @property
    def empty(self) -> Condition: ...


class FileShouldHaveSize:
    def __lt__(self, other: int) -> None: ...

    def __le__(self, other: int) -> None: ...

    def __eq__(self, other: int) -> None: ...

    def __ne__(self, other: int) -> None: ...

    def __ge__(self, other: int) -> None: ...

    def __gt__(self, other: int) -> None: ...


class FileShouldHave:
    @property
    def size(self) -> FileShouldHaveSize: ...

    def exact_content(self, content: bytearray) -> None: ...


class FileShould(BaseShould['FileShould']):
    def __init__(self, file: File) -> None: ...

    def meet(self, condition: Condition) -> None: ...

    @property
    def wait(self, condition: Condition, *, timeout: int = 3, interval: float = 0.1) -> None: ...

    @property
    def exist(self) -> Condition: ...

    @property
    def be(self) -> FileShouldBe: ...

    @property
    def have(self) -> FileShouldHave: ...
